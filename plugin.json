{
  "generator": {
    "version": "gojs-1.0.0"
  },
  "id": "de.worldiety.buildserver",
  "doc": "The plugin specification of the worldiety build server",
  "entities": [
    {
      "name": "ProjectList",
      "doc": "Entity which just holds an array of Projects",
      "fields": [
        {
          "name": "list",
          "type": "[]Project",
          "doc": "projects in this list"
        }
      ]
    },
    {
      "name": "Project",
      "doc": "Entity which holds meta information about all available projects",
      "fields": [
        {
          "name": "id",
          "type": "PK",
          "doc": "The unique id of each project"
        },
        {
          "name": "name",
          "type": "string",
          "doc": "The name of the project"
        },
        {
          "name": "repositories",
          "type": "[]string",
          "doc": "Git repositories for this project"
        }
      ]
    },
    {
      "name": "Build",
      "doc": "Entity which holds meta information about all available builds",
      "fields": [
        {
          "name": "id",
          "type": "PK",
          "doc": "The unique id of each build"
        },
        {
          "name": "projectId",
          "type": "FK(Project.id)",
          "doc": "The foreign key of the project, to which this build belongs"
        },
        {
          "name": "log",
          "type": "File.Id",
          "doc": "The foreign key to the file which holds the log"
        }
      ]
    },
    {
      "name": "File",
      "doc": "Entity which holds binary files",
      "fields": [
        {
          "name": "id",
          "type": "PK",
          "doc": "The unique id of each file"
        },
        {
          "name": "data",
          "type": "[]byte",
          "doc": "the actual binary data"
        }
      ]
    }
  ],
  "repositories": [
    {
      "entity": "Project",
      "storeIn": "devdrasil-json",
      "offline": [
        "READ",
        "LIST"
      ]
    },
    {
      "entity": "Build",
      "storeIn": "devdrasil-json"
    },
    {
      "entity": "File",
      "storeIn": "devdrasil-json"
    }
  ],
  "endpoints": [
    {
      "publish": "Repository",
      "of": "Build"
    },
    {
      "publish": "Path",
      "as": "/fancyStuff/{id}/{otherVar}/blub/{yetAnotherVar}",
      "withVerb": "GET",
      "withBody": "Project",
      "withResult": "ProjectList",
      "allowedFor": [
        "DO_FANCY_STUFF"
      ],
      "doc": "Performs fancy stuff"
    }
  ],
  "stories": [
    {
      "name": "fancyStory1",
      "doc": "As a user, I want to add/remove/update fancy stuff of different kind e.g. dev, staging and production."
    },
    {
      "name": "fancyStory2",
      "doc": "As a user, I want to be fancy on every state."
    }
  ],
  "views": [
    {
      "view": "ViewDashboard",
      "of": "ViewDashboardModel"
    }
  ],
  "states": [
    {
      "state": "UISDashboard",
      "refersTo": [
        "fancyStory1",
        "fancyStory2"
      ],
      "name": "FancyStuff",
      "states": [
        "UISDashboard",
        "UISConfigureDashboard"
      ],
      "doc": "As a user, I want to add/remove/update projects and connect them to multiple git repositories. Each project may also contain multiple servers, of different kind e.g. dev, staging and production."
    },
    {
      "name": "commitpicker",
      "doc": "As a user, I want to browse my git-repositories by branch and commits to pick what I want to build."
    },
    {
      "name": "build",
      "doc": "As a user, I want to browse completed (either successful or failed) builds."
    },
    {
      "name": "deliverable",
      "doc": "As a user, I want to browse the deliverables. I want to download them."
    },
    {
      "name": "deploy",
      "doc": "As a user, I want to see which version has been deployed to any project server. I want to deploy an artifact to a specific server."
    },
    {
      "name": "queue",
      "doc": "As a user, I want to see the build queue and what's up next. Also I want to prioritze builds and cancel them."
    }
  ]
}